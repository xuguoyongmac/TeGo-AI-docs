---
import Layout from '../layouts/Layout.astro';
const query = Astro.url.searchParams.get('q') || '';
---

<Layout title={`搜索: ${query} - TeGo-AI 文档中心`}>
  <div class="search-page">
    <div class="search-header">
      <div class="search-header-top">
        <a href="/" class="back-button">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M19 12H5M12 19l-7-7 7-7"/>
          </svg>
          返回首页
        </a>
      </div>
      <h1>搜索结果</h1>
    </div>

    <!-- 搜索框区域 - 放在标题下面 -->
    <div class="search-section">
      <div class="search-container">
        <div class="search-box">
          <input 
            type="text" 
            placeholder="搜索文档" 
            class="search-input" 
            id="searchInput"
            value=""
            autocomplete="off"
          />
          <button class="search-button" id="searchButton">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="11" cy="11" r="8"></circle>
              <path d="m21 21-4.35-4.35"></path>
            </svg>
            <span class="search-button-text">搜索</span>
          </button>
        </div>
      </div>
    </div>
    
    <div class="search-results" id="searchResults">
      <!-- 搜索结果将在这里动态生成 -->
    </div>
  </div>
</Layout>

<script>
  // 搜索数据
  const searchData = [
    {
      title: "产品介绍",
      description: "了解 TeGo-AI 的核心功能、技术优势和应用场景，包括智能体管理、API接口、快速部署等特性",
      url: "/product-intro",
      type: "官方文档",
      views: 156,
      keywords: ["产品", "介绍", "功能", "技术", "优势", "应用", "场景", "TeGo-AI", "智能体", "管理"]
    },
    {
      title: "快速开始指南",
      description: "详细的安装部署指南，助您快速上手 TeGo-AI 智能体管理平台，包含环境配置、基础设置等步骤",
      url: "/getting-started",
      type: "教程",
      views: 89,
      keywords: ["快速", "开始", "安装", "部署", "指南", "上手", "TeGo-AI", "教程", "入门"]
    },
    {
      title: "产品功能详解",
      description: "深入了解 TeGo-AI 的核心功能和技术特性，包括智能体管理、API接口、MCP服务等核心模块",
      url: "/product-intro/features",
      type: "官方文档",
      views: 234,
      keywords: ["产品", "功能", "核心", "技术", "特性", "TeGo-AI", "智能体", "管理", "平台"]
    },
    {
      title: "技术架构说明",
      description: "了解 TeGo-AI 的技术架构和系统设计，包括微服务架构、数据流设计、安全机制等技术细节",
      url: "/product-intro/architecture",
      type: "技术文档",
      views: 67,
      keywords: ["技术", "架构", "系统", "设计", "TeGo-AI", "智能体", "管理", "平台", "结构"]
    },
    {
      title: "体验手册",
      description: "快速体验产品功能的完整指南和演示，包含POC验证、功能测试、性能评估等实践内容",
      url: "/poc-manual",
      type: "体验指南",
      views: 123,
      keywords: ["体验", "手册", "功能", "指南", "演示", "POC", "试用", "测试"]
    },
    {
      title: "常见问题解答",
      description: "解答您在使用过程中的常见疑问和问题，包括故障排除、最佳实践、技术支持等内容",
      url: "/faq",
      type: "FAQ",
      views: 445,
      keywords: ["常见", "问题", "疑问", "解答", "FAQ", "帮助", "支持", "故障"]
    }
  ];

  // 高亮文本
  function highlightText(text: string, query: string) {
    if (!query) return text;
    const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
    return text.replace(regex, '<span class="highlight" style="color: #3b82f6 !important;">$1</span>');
  }

  // 搜索函数
  function performSearch(query: string) {
    if (!query.trim()) return [];
    
    // 分词处理：将查询拆分为多个关键词
    const queryWords = query.toLowerCase().split(/\s+/).filter(word => word.length > 0);
    
    const results = searchData.filter(item => {
      const searchText = `${item.title} ${item.description} ${item.keywords.join(' ')}`.toLowerCase();
      
      // 检查是否包含所有关键词（AND逻辑）
      return queryWords.every(word => searchText.includes(word));
    });

    return results.sort((a, b) => {
      const aScore = getMatchScore(a, query, queryWords);
      const bScore = getMatchScore(b, query, queryWords);
      return bScore - aScore;
    });
  }

  function getMatchScore(item: any, query: string, queryWords: string[]) {
    const queryLower = query.toLowerCase();
    let score = 0;
    
    // 完整匹配得分
    if (item.title.toLowerCase().includes(queryLower)) score += 15;
    if (item.description.toLowerCase().includes(queryLower)) score += 8;
    
    // 分词匹配得分
    queryWords.forEach(word => {
      if (item.title.toLowerCase().includes(word)) score += 8;
      if (item.description.toLowerCase().includes(word)) score += 4;
      
      // 关键词匹配得分
      const keywordMatches = item.keywords.filter((keyword: string) => 
        keyword.toLowerCase().includes(word)
      ).length;
      score += keywordMatches * 6;
    });
    
    // 连续匹配加分
    if (queryWords.length > 1) {
      const consecutiveMatches = queryWords.filter((word, index) => {
        if (index === 0) return true;
        const prevWord = queryWords[index - 1];
        const searchText = `${item.title} ${item.description} ${item.keywords.join(' ')}`.toLowerCase();
        return searchText.includes(`${prevWord} ${word}`) || searchText.includes(`${word} ${prevWord}`);
      }).length;
      score += consecutiveMatches * 3;
    }
    
    return score;
  }

    // 搜索框事件监听
    const searchInput = document.getElementById('searchInput') as HTMLInputElement;
    const searchButton = document.getElementById('searchButton');

    // 搜索按钮点击事件
    searchButton?.addEventListener('click', function() {
      const query = searchInput.value.trim();
      if (query) {
        // 跳转到搜索结果页面
        window.location.href = `/search?q=${encodeURIComponent(query)}`;
      }
    });

    // 回车键搜索
    searchInput?.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        const query = this.value.trim();
        if (query) {
          // 跳转到搜索结果页面
          window.location.href = `/search?q=${encodeURIComponent(query)}`;
        }
      }
    });

    // 页面加载时执行搜索
  document.addEventListener('DOMContentLoaded', function() {
    const query = new URLSearchParams(window.location.search).get('q') || '';
    const resultsContainer = document.getElementById('searchResults');
    const searchInput = document.getElementById('searchInput') as HTMLInputElement;
    
    // 将搜索关键词填充到搜索框中
    if (searchInput && query) {
      searchInput.value = query;
    }
    
    if (!resultsContainer) return;
    
    if (!query.trim()) {
      resultsContainer.innerHTML = '<div class="no-query">请输入搜索关键词</div>';
      return;
    }
    
    const results = performSearch(query);
    
    if (results.length === 0) {
      resultsContainer.innerHTML = `
        <div class="no-results">
          <h3>没有找到相关结果</h3>
          <p>请尝试其他关键词或检查拼写</p>
        </div>
      `;
      return;
    }
    
    resultsContainer.innerHTML = `
      <div class="results-count">找到 ${results.length} 个结果</div>
      <div class="results-list">
        ${results.map((item, index) => `
          <div class="result-item" style="text-decoration: none !important; color: #000 !important; padding-bottom: 1.5rem;">
            <a href="${item.url}" style="text-decoration: underline; color: #000;">
              <h3 class="result-title" style="text-decoration: underline; color: #000; margin: 0 0 0.5rem 0;">${highlightText(item.title, query)}</h3>
            </a>
            <p class="result-description" style="text-decoration: none !important; color: #000 !important;">${highlightText(item.description, query)}</p>
          </div>
          ${index < results.length - 1 ? '<div style="height: 1px; background: rgba(0,0,0,0.08); margin: 0 0 1rem 0;"></div>' : ''}
        `).join('')}
      </div>
    `;
  });
</script>

<style>
  .search-page {
    max-width: 1000px;
    margin: 0 auto;
    padding: 2rem;
    position: relative;
    background: linear-gradient(180deg, 
      rgba(59, 130, 246, 0.02) 0%, 
      transparent 50%, 
      rgba(139, 92, 246, 0.02) 100%
    );
    border-radius: 20px;
    min-height: 100vh;
  }

  .search-page::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="20" height="20" patternUnits="userSpaceOnUse"><path d="M 20 0 L 0 0 0 20" fill="none" stroke="rgba(59,130,246,0.03)" stroke-width="0.5"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
    opacity: 0.5;
    pointer-events: none;
    z-index: -1;
  }

  /* 装饰性浮动元素 */
  .search-page::after {
    content: '';
    position: absolute;
    top: 10%;
    right: 5%;
    width: 100px;
    height: 100px;
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(139, 92, 246, 0.1));
    border-radius: 50%;
    filter: blur(20px);
    z-index: -1;
    animation: float 6s ease-in-out infinite;
  }

  @keyframes float {
    0%, 100% {
      transform: translateY(0px) rotate(0deg);
    }
    50% {
      transform: translateY(-20px) rotate(180deg);
    }
  }

  /* 搜索框样式 - 与首页保持一致 */
  .search-section {
    padding: 1rem 0 2rem 0;
    text-align: center;
    margin-bottom: 3rem;
    padding-bottom: 3rem;
    position: relative;
  }

  .search-section::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 95%;
    height: 2px;
    background: linear-gradient(90deg, 
      transparent 0%, 
      rgba(59, 130, 246, 0.3) 15%, 
      rgba(59, 130, 246, 0.8) 50%, 
      rgba(139, 92, 246, 0.8) 50%, 
      rgba(139, 92, 246, 0.3) 85%, 
      transparent 100%
    );
    border-radius: 1px;
  }



  .search-container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .search-box {
    display: flex;
    background: white;
    border-radius: 50px;
    overflow: hidden;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
    margin: 0 auto;
    max-width: 800px;
    width: 100%;
  }

  .search-input {
    flex: 1;
    border: none;
    padding: 1rem 1.5rem;
    font-size: 1rem;
    outline: none;
    background: transparent;
    border-radius: 50px 0 0 50px;
  }

  .search-input::placeholder {
    color: #9ca3af;
  }

  .search-button {
    background: linear-gradient(135deg, #3b82f6, #8b5cf6);
    border: none;
    padding: 1.2rem 2rem;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 0 50px 50px 0;
    position: relative;
    overflow: hidden;
    box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
    font-weight: 600;
    font-size: 1.1rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .search-button:hover {
    background: linear-gradient(135deg, #2563eb, #7c3aed);
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(59, 130, 246, 0.4);
  }

  .search-button:active {
    transform: translateY(-1px);
    box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
  }

  .search-button svg {
    position: relative;
    z-index: 2;
    transition: all 0.3s ease;
  }

  .search-button:hover svg {
    transform: scale(1.1);
  }

  .search-button-text {
    margin-left: 0.5rem;
    font-weight: 700;
    transition: all 0.3s ease;
    position: relative;
    z-index: 2;
  }

  .search-button:hover .search-button-text {
    transform: scale(1.05);
  }

  .search-header {
    text-align: center;
    margin-bottom: 35px;
    padding-bottom: 0;
  }

  .search-header-top {
    display: flex;
    justify-content: flex-start;
    margin-bottom: 2rem;
  }

  .back-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    color: #64748b;
    text-decoration: none;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .back-button:hover {
    background: #f1f5f9;
    border-color: #cbd5e1;
    color: #475569;
    transform: translateY(-1px);
  }

  .back-button svg {
    transition: transform 0.2s ease;
  }

  .back-button:hover svg {
    transform: translateX(-2px);
  }

  .search-header h1 {
    font-size: 2.5rem;
    color: #1e293b;
    margin-bottom: 1rem;
  }



  .results-count {
    font-size: 1.1rem;
    color: #64748b;
    margin-top: 2rem;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
  }

  .results-list {
    display: flex;
    flex-direction: column;
    gap: 2.5rem;
  }

  .result-item {
    display: block;
    padding: 2rem;
    text-decoration: none !important;
    color: #000 !important;
    border: 1px solid rgba(148, 163, 184, 0.1);
    border-radius: 16px;
    background: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(10px);
    transition: all 0.3s ease;
    margin-bottom: 1rem;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05);
    position: relative;
    overflow: hidden;
  }

  .result-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, #3b82f6, #8b5cf6);
    transform: scaleX(0);
    transition: transform 0.3s ease;
  }

  .result-item:hover::before {
    transform: scaleX(1);
  }

  .result-item:hover {
    text-decoration: none !important;
    color: #000 !important;
  }

  .result-item:visited {
    text-decoration: none !important;
    color: #000 !important;
  }

  .result-item:link {
    text-decoration: none !important;
    color: #000 !important;
  }

  .result-item:last-child {
    border-bottom: none;
  }

  .result-item:hover {
    background: rgba(255, 255, 255, 0.95);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(59, 130, 246, 0.15);
    border-color: rgba(59, 130, 246, 0.2);
  }

  .result-title {
    font-size: 1.3rem;
    font-weight: 700;
    color: #1e293b !important;
    margin: 0 0 0.75rem 0;
    text-decoration: none !important;
    transition: color 0.3s ease;
  }

  .result-item:hover .result-title {
    color: #3b82f6 !important;
  }

  .result-description {
    color: #64748b !important;
    margin: 0;
    line-height: 1.6;
    font-size: 1rem;
    text-decoration: none !important;
    transition: color 0.3s ease;
  }

  .result-item:hover .result-description {
    color: #475569 !important;
  }

  .highlight {
    color: #3b82f6 !important;
    background: none !important;
  }

  .result-button:hover {
    background: rgba(59, 130, 246, 0.2) !important;
    border-color: rgba(59, 130, 246, 0.4) !important;
  }

  .no-query, .no-results {
    text-align: center;
    padding: 3rem;
    color: #64748b;
  }

  .no-results h3 {
    color: #1e293b;
    margin-bottom: 1rem;
  }

  @media screen and (max-width: 768px) {
    .search-page {
      padding: 1rem;
    }
    
    .search-header h1 {
      font-size: 2rem;
    }
    
    .result-item {
      padding: 1rem;
    }
    
    .result-header {
      flex-direction: column;
      gap: 0.5rem;
    }
    
    .result-type {
      margin-left: 0;
      align-self: flex-start;
    }
  }
</style>
