---
const currentPath = Astro.url.pathname;

const navItems = [
  { 
    name: '知识库', 
    path: '/product-intro',
            children: [
          { name: '产品介绍', path: '/product-intro' },
          { name: '技术架构', path: '/architecture' },
          { name: '使用手册', path: '/product-guide' },
          { name: '产品手册', path: '/product-manual' },
          { name: '快速开始', path: '/getting-started' },
          { name: '产品核心功能', path: '/features' },
          { name: '产品功能清单', path: '/features-list' },
          { name: 'POC体验手册', path: '/poc-manual' },
          { name: '运维部署', path: '/operations' },
          { name: '常见问题', path: '/faq' }
        ]
  },
  { name: '关于我们', path: '/about' },
    { name: '预约演示', path: '/appointment', isHighlight: true },
];
---

<nav class="navbar">
  <div class="nav-container">
    <div class="nav-brand">
      <a href="../" class="logo-link">
        <img src="../public/logo_light.png" alt="Logo" class="logo-image" />
      </a>
    </div>
    <ul class="nav-menu">
      {navItems.map(item => (
        <li class={`nav-item ${item.children ? 'has-dropdown' : ''}`}>
          {item.children ? (
            <div class="dropdown-container">
              <a 
                href={item.path} 
                class={`nav-link dropdown-toggle ${currentPath === item.path ? 'active' : ''}`}
              >
                {item.name}
              </a>
              <div class="dropdown-menu">
                <div class="dropdown-content">
                  <div class="dropdown-column">
                    {item.children.slice(0, Math.ceil(item.children.length / 2)).map(child => (
                      <a 
                        href={child.path} 
                        class={`dropdown-item ${currentPath === child.path ? 'active' : ''}`}
                      >
                        <div class="dropdown-item-title">{child.name}</div>
                        <div class="dropdown-item-description">
                          {child.name === '产品介绍' && '了解 TeGo-AI 的核心功能和技术优势'}
                          {child.name === '技术架构' && '了解技术架构和系统设计'}
                          {child.name === '使用手册' && '详细的安装部署和操作指南'}
                          {child.name === '产品手册' && '完整的产品功能说明与操作手册'}
                          {child.name === '快速开始' && '快速体验产品功能的完整指南'}
                          {child.name === '产品核心功能' && '深入了解核心功能和技术特性'}
                          {child.name === '产品功能清单' && '完整的产品功能列表和说明'}
                          {child.name === 'POC体验手册' && '快速体验产品功能的完整指南'}
                          {child.name === '运维部署' && '系统运维和部署指南'}
                          {child.name === '常见问题' && '查找常见问题的解决方案'}
                        </div>
                      </a>
                    ))}
                  </div>
                  <div class="dropdown-column">
                    {item.children.slice(Math.ceil(item.children.length / 2)).map(child => (
                      <a 
                        href={child.path} 
                        class={`dropdown-item ${currentPath === child.path ? 'active' : ''}`}
                      >
                        <div class="dropdown-item-title">{child.name}</div>
                        <div class="dropdown-item-description">
                          {child.name === '产品介绍' && '了解 TeGo-AI 的核心功能和技术优势'}
                          {child.name === '技术架构' && '了解技术架构和系统设计'}
                          {child.name === '使用手册' && '详细的安装部署和操作指南'}
                          {child.name === '产品手册' && '完整的产品功能说明与操作手册'}
                          {child.name === '快速开始' && '快速体验产品功能的完整指南'}
                          {child.name === '产品核心功能' && '深入了解核心功能和技术特性'}
                          {child.name === '产品功能清单' && '完整的产品功能列表和说明'}
                          {child.name === 'POC体验手册' && '快速体验产品功能的完整指南'}
                          {child.name === '运维部署' && '系统运维和部署指南'}
                          {child.name === '常见问题' && '查找常见问题的解决方案'}
                        </div>
                      </a>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <a 
              href={item.path} 
              class={`nav-link ${currentPath === item.path ? 'active' : ''} ${item.isHighlight ? 'highlight-link' : ''}`}
            >
              {item.name}
            </a>
          )}
        </li>
      ))}
    </ul>
    <div class="hamburger">
      <span></span>
      <span></span>
      <span></span>
    </div>
  </div>
</nav>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const hamburger = document.querySelector('.hamburger');
    const navMenu = document.querySelector('.nav-menu');
    const navbar = document.querySelector('.navbar');

    // 智能导航栏控制
    let lastScrollTop = 0;
    let scrollThreshold = 30; // 滚动阈值
    let isScrolling = false;
    let scrollTimeout;
    let hideTimeout; // 隐藏超时
    let scrollDirection = 'none'; // 滚动方向

    function handleScroll() {
      if (isScrolling) return;
      
      const currentScrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const scrollDelta = currentScrollTop - lastScrollTop;
      
      // 如果滚动距离小于阈值，不处理
      if (Math.abs(scrollDelta) < scrollThreshold) return;
      
      isScrolling = true;
      
      // 确定滚动方向
      if (scrollDelta > 0) {
        scrollDirection = 'down';
      } else if (scrollDelta < 0) {
        scrollDirection = 'up';
      }
      
      // 1. 页面往下滚动时，隐藏导航栏（需要超过一定位置）
      if (scrollDirection === 'down' && currentScrollTop > 200) {
        navbar?.classList.remove('navbar-visible');
        navbar?.classList.add('navbar-hidden');
      }
      
      // 确保在顶部安全区域内，导航栏始终显示
      if (currentScrollTop <= 200) {
        navbar?.classList.remove('navbar-hidden');
        navbar?.classList.add('navbar-visible');
      }
      
      // 2. 页面往上滚动时，显示导航栏
      if (scrollDirection === 'up') {
        navbar?.classList.remove('navbar-hidden');
        navbar?.classList.add('navbar-visible');
      }
      
      lastScrollTop = currentScrollTop;
      
      // 防抖处理
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(() => {
        isScrolling = false;
        
        // 3. 当用户停止滚动时，用户可能在阅读
        // 如果导航栏是显示的，根据位置判断，1.5s后是否需要隐藏
        if (navbar?.classList.contains('navbar-visible') && currentScrollTop > 200) {
          clearTimeout(hideTimeout);
          hideTimeout = setTimeout(() => {
            // 1.5秒后隐藏导航栏（但不在顶部安全区域内）
            if (window.pageYOffset > 200) {
              navbar?.classList.remove('navbar-visible');
              navbar?.classList.add('navbar-hidden');
            }
          }, 1500);
        }
      }, 150);
    }

    // 监听滚动事件
    window.addEventListener('scroll', handleScroll, { passive: true });
    
    // 页面顶部时显示导航栏
    window.addEventListener('scroll', () => {
      if (window.pageYOffset <= 200) {
        navbar?.classList.remove('navbar-hidden');
        navbar?.classList.add('navbar-visible');
      }
    }, { passive: true });

    // 鼠标悬停在导航栏区域时显示
    document.addEventListener('mouseenter', (e) => {
      if (e.target === navbar || navbar?.contains(e.target as Node)) {
        navbar?.classList.remove('navbar-hidden');
        navbar?.classList.add('navbar-visible');
      }
    });

    // 触摸设备支持 - 触摸顶部区域时显示导航栏
    let touchStartY = 0;
    document.addEventListener('touchstart', (e) => {
      touchStartY = e.touches[0].clientY;
    }, { passive: true });

    document.addEventListener('touchmove', (e) => {
      const touchY = e.touches[0].clientY;
      
      // 如果触摸在顶部区域，显示导航栏
      if (touchY < 100) {
        navbar?.classList.remove('navbar-hidden');
        navbar?.classList.add('navbar-visible');
      }
    }, { passive: true });

    // 鼠标悬停在导航栏区域时显示
    document.addEventListener('mouseenter', (e) => {
      if (e.target === navbar || navbar?.contains(e.target as Node)) {
        navbar?.classList.remove('navbar-hidden');
        navbar?.classList.add('navbar-visible');
      }
    });

    // 汉堡菜单
    hamburger?.addEventListener('click', () => {
      hamburger.classList.toggle('active');
      navMenu?.classList.toggle('active');
    });

    document.querySelectorAll('.nav-link, .dropdown-item').forEach(n => n.addEventListener('click', () => {
      hamburger?.classList.remove('active');
      navMenu?.classList.remove('active');
    }));
  });
</script>